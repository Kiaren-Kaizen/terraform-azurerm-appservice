default:
  tags:
    - platform

include: .pipelines/base.gitlab-ci.yml

variables:
  TF_WORKSPACE: $TF_CLOUD_WORKSPACE
  TF_DIRECTORY: $CI_PROJECT_DIR
  TF_API_TOKEN: $TF_API_TOKEN
  TF_CLOUD_ORGANIZATION: $TF_CLOUD_ORGANIZATION
  
  PROJECT_PIPELINE_NAME: "Default pipeline name"

stages:
  - build
  - test
  - sast
  - secret-detection
  - container-scanning
  - dast
  - deploy
  - cleanup

workflow:
  name: "$PROJECT_PIPELINE_NAME"
  rules:
    # Default branch (e.g., 'main') - Non-speculative apply
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always
      variables:
        PROJECT_PIPELINE_NAME: "$CI_DEFAULT_BRANCH pipeline"
        PLAN_ONLY: "false"
        SPECULATIVE: "false"
        SAVE_PLAN: "false"
        IS_DESTROY: "false"
    # Merge request (PR) - Plan only
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      variables:
        PROJECT_PIPELINE_NAME: "Merge Request pipeline: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        PLAN_ONLY: "true"
        SPECULATIVE: "true"
        SAVE_PLAN: "false"
        IS_DESTROY: "false"

# Upload configuration for the current workspace
upload_configuration:
  stage: ".pre"
  extends: .tfc:upload_configuration

# Create a Terraform run (plan or apply depending on the context)
create_run:
  stage: "build"
  extends: .tfc:create_run
  variables:
    MESSAGE: "LGTM"

# SAST Security Scanning
sast:
  stage: sast
  extends: .tfc:plan_output
  artifacts:
    reports:
      sast: gl-sast-report.json

# Secret Detection Scanning
secret_detection:
  stage: secret-detection
  extends: .tfc:plan_output
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json

# Container Scanning
container_scanning:
  stage: container-scanning
  extends: .tfc:plan_output
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

# DAST Security Scanning
dast:
  stage: dast
  extends: .tfc:plan_output
  artifacts:
    reports:
      dast: gl-dast-report.json

# Apply Terraform run - Only on the default branch after a successful plan
apply_run:
  stage: "deploy"
  extends: .tfc:apply_run
  rules:
    # Only allow apply on the default branch
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  # Do not apply for merge requests
      when: never

# Plan Output - Runs on merge requests (PRs)
plan_output:
  stage: "deploy"
  extends: .tfc:plan_output
  rules:
    # Run plan output only for merge requests
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Check run status - Only runs for merge requests
check_run_status:
  stage: ".post"
  script:
    - if [ "$run_status" != "planned_and_finished" ]; then exit 1; fi;
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
